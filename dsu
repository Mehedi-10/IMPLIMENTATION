class disjointSet
{
    vector<data_type> parent,size;
    
    void disjointSet(data_type n)
    {
        parent.resize(n),size.resize(n,1);
        iota(parent.begin(),parent.end(),0);
    }
    
    data_type find_root(data_type i)
    {
        while(parent[i]!=i)
            {
                parent[i]=parent[parent[i]];
                i=parent[i];
            }
        return i;
    }
    
    void weighted_union(data_type a,data_type b)
    {
        data_type root_a=find_root(a);
        data_type root_b=find_root(b);
        if(size[root_a]>=size[root_b])
            swap(root_a,root_b);
        parent[root_a]=parent[root_b],size[root_b]+=size[root_a];
    }
    
    bool is_connected(data_type a,data_type b)
    {
       return find_root(a)==find_root(b);
    }
};
